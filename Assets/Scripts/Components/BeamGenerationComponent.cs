// All this code was generated by Chatgpt, I just wanted to test the concept quickly

using System.Collections.Generic;
using UnityEngine;

public class BeamGenerationComponent : MonoBehaviour
{
    [Header("Beam Settings")]
    [Range(1, 12)] public int beamCount = 6;
    public float beamLength = 3f;
    public float beamWidth = 0.2f;
    public Color beamColor = Color.red;
    public bool generateRuntimeBeams = true;

    [Header("Runtime Prefab (optional)")]
    public GameObject beamPrefab; // If none, create a simple default quad

    private List<GameObject> runtimeBeams = new List<GameObject>();

    private void OnEnable()
    {
        RegenerateBeams();
    }

#if UNITY_EDITOR
    private void OnValidate()
    {
        // Prevent immediate regeneration in edit mode to avoid hierarchy conflicts
        if (!Application.isPlaying)
        {
            UnityEditor.EditorApplication.delayCall += () =>
            {
                if (this != null) // ensure object still exists
                    RegenerateBeams();
            };
        }
        else
        {
            RegenerateBeams();
        }
    }
#else
private void OnValidate()
{
    RegenerateBeams();
}
#endif

    private void RegenerateBeams()
    {
        for (int i = runtimeBeams.Count - 1; i >= 0; i--)
        {
            GameObject beam = runtimeBeams[i];
            if (beam != null)
            {
#if UNITY_EDITOR
                if (!Application.isPlaying)
                {
                    var toDestroy = beam;
                    UnityEditor.EditorApplication.delayCall += () =>
                    {
                        if (toDestroy != null)
                            DestroyImmediate(toDestroy);
                    };
                }
                else
                {
                    Destroy(beam);
                }
#else
        Destroy(beam);
#endif
            }
        }
        runtimeBeams.Clear();

        if (!generateRuntimeBeams)
            return;

        float angleStep = 360f / beamCount;

        for (int i = 0; i < beamCount; i++)
        {
            float angle = angleStep * i;
            GameObject beamObj;

            if (beamPrefab != null)
            {
#if UNITY_EDITOR
                if (!Application.isPlaying)
                    beamObj = (GameObject)UnityEditor.PrefabUtility.InstantiatePrefab(beamPrefab, transform);
                else
                    beamObj = Instantiate(beamPrefab, transform);
#else
            beamObj = Instantiate(beamPrefab, transform);
#endif
            }
            else
            {
                beamObj = GameObject.CreatePrimitive(PrimitiveType.Quad);
                beamObj.transform.SetParent(transform);
                var renderer = beamObj.GetComponent<Renderer>();
                if (renderer != null)
                    renderer.sharedMaterial.color = beamColor;
            }

            beamObj.name = $"Beam_{i}";

            // Reset transform
            beamObj.transform.localScale = new Vector3(beamWidth, beamLength, 1f);
            beamObj.transform.localPosition = Vector3.zero;
            beamObj.transform.localRotation = Quaternion.identity;

            // Rotate around Z
            beamObj.transform.Rotate(Vector3.forward, angle);

            // Offset the beam so that its BOTTOM is at the center
            // (remember: local UP points along beam's length, since we're using vertical scale)
            beamObj.transform.localPosition += beamObj.transform.up * (beamLength / 2f);

            beamObj.hideFlags = HideFlags.DontSave; // prevents beams from persisting after exiting play mode

            runtimeBeams.Add(beamObj);
        }
    }
}
